# -*- coding: utf-8 -*-
"""NER_Bert.ipynb

!pip install pytorch_pretrained_bert

import torch
from torch.optim import Adam
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler
from keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from pytorch_pretrained_bert import BertTokenizer, BertConfig
from pytorch_pretrained_bert import BertForTokenClassification, BertAdam
Automatically generated by Colaboratory.


"""

!pip install pytorch-pretrained-bert==0.4.0



import pandas as pd
import numpy as np
from tqdm import tqdm, trange

from google.colab import files
data = files.upload()



def read_data(file):
# data=pd.read_table(r'S21-gene-train.txt',sep='\t',header=None)
  sentence=[]
  sentences=[]
  with open(file,encoding='utf-8')as f:
      
      for i in f:
  #         print(i)
          if i.strip()=='':
                
              sentences.append(sentence)
              sentence=[]
                
                
          else:
              line=i.split()
              sentence.append((line[0],line[1],line[2]))
    
      sentences.append(sentence)
  return sentences

sentences=read_data('S21-gene-train.txt')
sentences[0]

text = [" ".join([s[1] for s in sent]) for sent in sentences]
text[0]

labels = [[s[2] for s in sent] for sent in sentences]
print(labels[0])



from itertools import chain

tags_vals = set(list(chain(*labels)))
tag2idx = {t: i for i, t in enumerate(tags_vals)}
idx2tag ={i:t for i,t in enumerate(tags_vals)}




max_len = 60
batch_size = 16



device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
n_gpu = torch.cuda.device_count()
torch.cuda.get_device_name(0)

"""tokenize"""

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)
tokenized_texts = [tokenizer.tokenize(sent) for sent in text]
print(tokenized_texts[0])

"""token to id"""

input_ids = pad_sequences([tokenizer.convert_tokens_to_ids(txt) for txt in tokenized_texts],
                          maxlen=max_len, dtype="long", truncating="post", padding="post")
print(input_ids[0])

tags = pad_sequences([[tag2idx.get(l) for l in lab] for lab in labels],
                     maxlen=max_len, value=tag2idx["O"], padding="post",
                     dtype="long", truncating="post")
print(tags[0])

"""mask_attention"""

attention_masks = [[float(i>0) for i in ii] for ii in input_ids]
print(attention_masks[0])

"""split the data """

tr_inputs, val_inputs, tr_tags, val_tags = train_test_split(input_ids, tags, random_state=2019, test_size=0.1)
tr_masks, val_masks, _, _ = train_test_split(attention_masks, input_ids, random_state=2019, test_size=0.1)



tr_inputs = torch.tensor(tr_inputs)
val_inputs = torch.tensor(val_inputs)
tr_tags = torch.tensor(tr_tags)
val_tags = torch.tensor(val_tags)
tr_masks = torch.tensor(tr_masks)
val_masks = torch.tensor(val_masks)


train_data = TensorDataset(tr_inputs, tr_masks, tr_tags)
train_sampler = RandomSampler(train_data)
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)

valid_data = TensorDataset(val_inputs, val_masks, val_tags)
valid_sampler = SequentialSampler(valid_data)
valid_dataloader = DataLoader(valid_data, sampler=valid_sampler, batch_size=batch_size)



model = BertForTokenClassification.from_pretrained("bert-base-uncased", num_labels=len(tag2idx))

model.cuda()

optimizer

FULL_FINETUNING = True
if FULL_FINETUNING:
    param_optimizer = list(model.named_parameters())
    no_decay = ['bias', 'gamma', 'beta']
    optimizer_grouped_parameters = [
        {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],
         'weight_decay_rate': 0.01},
        {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],
         'weight_decay_rate': 0.0}
    ]
else:
    param_optimizer = list(model.classifier.named_parameters()) 
    optimizer_grouped_parameters = [{"params": [p for n, p in param_optimizer]}]
optimizer = BertAdam(optimizer_grouped_parameters, lr=3e-5)





!pip install seqeval
from seqeval.metrics import f1_score

def flat_accuracy(preds, labels):
    pred_flat = np.argmax(preds, axis=2).flatten()
    labels_flat = labels.flatten()
    return np.sum(pred_flat == labels_flat) / len(labels_flat)


epochs = 1
max_grad_norm = 1.0

for _ in trange(epochs, desc="Epoch"): # visualization
     # training
     model.train()
     tr_loss = 0
     nb_tr_steps = 0
     for step, batch in enumerate(train_dataloader):
       
         batch = tuple(t.to(device) for t in batch)
         b_input_ids, b_input_mask, b_labels = batch
         # forwardward computing
         loss = model(b_input_ids, token_type_ids=None,
                      attention_mask=b_input_mask, labels=b_labels)
         # backword computing
         loss.backward()
         # loss
         tr_loss += loss.item()
         nb_tr_steps += 1
         # gradient clipping
         torch.nn.utils.clip_grad_norm_(parameters=model.parameters(), max_norm=max_grad_norm)
         # uodate the weights
         optimizer.step()
         model.zero_grad()
    
     print("Train loss: {}".format(tr_loss/nb_tr_steps))
  
    model.eval()
    eval_loss, eval_accuracy = 0, 0
    nb_eval_steps = 0
    predictions , true_labels = [], []
    for batch in valid_dataloader:
        batch = tuple(t.to(device) for t in batch)
        b_input_ids, b_input_mask, b_labels = batch
        
        with torch.no_grad():
            tmp_eval_loss = model(b_input_ids, token_type_ids=None,
                                  attention_mask=b_input_mask, labels=b_labels)
            logits = model(b_input_ids, token_type_ids=None,
                           attention_mask=b_input_mask)
        logits = logits.detach().cpu().numpy()#detach the weights from the nets and not to update the weights
        label_ids = b_labels.to('cpu').numpy()
        predictions.extend([list(p) for p in np.argmax(logits, axis=2)])
        true_labels.append(label_ids)
        # computing the accuracy and loss
        tmp_eval_accuracy = flat_accuracy(logits, label_ids)
        
        eval_loss += tmp_eval_loss.mean().item()
        eval_accuracy += tmp_eval_accuracy
        nb_eval_steps += 1
   
    print("Validation loss: {}".format(eval_loss/nb_eval_steps))
    print("Validation Accuracy: {}".format(eval_accuracy/nb_eval_steps))
    # for p in predictions:
    #   for pi in p:
    #     print(pi)
    pred_tags = [idx2tag[p_i] for p_i in list(chain(*predictions))] 
    

    true_labels=np.array(true_labels)
    valid_tags=[idx2tag[c] for c in l_ii for l_ii in list(chain(*true_labels))]
  
    print("F1-Score: {}".format(f1_score(pred_tags, valid_tags)))


